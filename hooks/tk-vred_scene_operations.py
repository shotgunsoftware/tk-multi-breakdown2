# Copyright (c) 2020 Shotgun Software Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Shotgun Software Inc.

import os
import sgtk

import vrScenegraph
import vrFieldAccess
import vrFileIO
import vrMaterialPtr


HookBaseClass = sgtk.get_hook_baseclass()


class BreakdownSceneOperations(HookBaseClass):
    """
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene reference
        that is returned should be represented by a dictionary with three keys:

        - "node_name": The name of the 'node' that is to be operated on. Most DCCs have
          a concept of a node, path or some other way to address a particular
          object in the scene.
        - "node_type": The object type that this is. This is later passed to the
          update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.
        - "extra_data": Optional key to pass some extra data to the update method
          in case we'd like to access them when updating the nodes.

        Toolkit will scan the list of items, see if any of the objects matches
        a published file and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of date.
        """

        refs = []

        for node in vrScenegraph.getAllNodes():
            path = None

            if node.hasAttachment("FileInfo"):
                path = vrFieldAccess.vrFieldAccess(
                    node.getAttachment("FileInfo")
                ).getString("filename")

            if path is not None:
                refs.append(
                    {"node_name": node.getName(), "node_type": node.getType(), "path": path}
                )

        return refs

    def update(self, item):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        :param item: Dictionary on the same form as was generated by the scan_scene hook above.
                     The path key now holds the path that the node should be updated *to* rather than the current path.
        """

        node_name = item["node_name"]
        node_type = item["node_type"]
        path = item["path"]

        # find all the nodes in the current scene regarding to their name
        nodes = vrScenegraph.findNodes(item["node"])
        if len(nodes) <= 0:
            self.logger.debug("Couldn't find any nodes in the scene graph where name is {}.".format(node_name))
            return

        if node_type in ["Geometry", "ExtReference"]:
            # load the geometry only for the first node, but after that, try to clone this node to avoid importing
            # the file many times
            new_node = vrFileIO.loadGeometry(path)
            self._apply_transforms_and_materials(nodes[0], new_node)

    def _apply_transforms_and_materials(self, old_node, new_node):
        """
        Get the transforms from the old node and apply them to the new node and its children

        :param old_node: Node we want to get transforms from
        :param new_node: Node we want to apply transforms to
        """

        # skip surface nodes
        if old_node.getName() == "Surface":
            return

        # apply transforms
        vrScenegraph.copyTransformation(old_node, new_node)

        # apply materials
        material = old_node.getMaterial()
        if material:
            new_node.setMaterial(material)

        # finally, do the same actions for each child of the current node

