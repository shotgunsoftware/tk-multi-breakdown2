# Copyright (c) 2021 Autodesk, Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Autodesk, Inc.

import os

import sgtk

import alias_api

HookBaseClass = sgtk.get_hook_baseclass()


class BreakdownSceneOperations(HookBaseClass):
    """
    Breakdown operations for Alias.

    This implementation handles detection of Alias references.
    """

    def scan_scene(self):
        """
        The scan scene method is executed once at startup and its purpose is
        to analyze the current scene and return a list of references that are
        to be potentially operated on.

        The return data structure is a list of dictionaries. Each scene reference
        that is returned should be represented by a dictionary with three keys:

        - "node_name": The name of the 'node' that is to be operated on. Most DCCs have
          a concept of a node, path or some other way to address a particular
          object in the scene.
        - "node_type": The object type that this is. This is later passed to the
          update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.
        - "extra_data": Optional key to pass some extra data to the update method
          in case we'd like to access them when updating the nodes.

        Toolkit will scan the list of items, see if any of the objects matches
        a published file and try to determine if there is a more recent version
        available. Any such versions are then displayed in the UI as out of date.
        """

        refs = []

        alias_refs = alias_api.get_references()
        sg_data = self._get_sg_publish_data(alias_refs)

        # Find PublishedFiles associated with the references
        for r in alias_refs:

            if r.source_path in sg_data.keys():
                node_sg_data = sg_data[r.source_path]
            elif r.path in sg_data.keys():
                node_sg_data = sg_data[r.path]
            else:
                node_sg_data = None

            if not node_sg_data:
                self.logger.error(
                    "Couldn't find a ShotGrid Published File entry for {}".format(
                        r.source_path
                    )
                )
                continue

            tk = self.parent.engine.get_tk_from_project_id(
                node_sg_data["project"]["id"]
            )
            reference_template = self.parent.engine.get_reference_template(
                tk, node_sg_data
            )

            # here, we've imported a file as reference and we need to use the source path to get the next
            # available version
            if reference_template:
                refs.append(
                    {
                        "node_name": r.name,
                        "node_type": "reference",
                        "path": r.source_path.replace("/", os.path.sep),
                        "extra_data": {"sg_data": node_sg_data},
                    }
                )
            else:
                refs.append(
                    {
                        "node_name": r.name,
                        "node_type": "reference",
                        "path": r.path.replace("/", os.path.sep),
                        "extra_data": {"sg_data": node_sg_data},
                    }
                )

        return refs

    def update(self, item):
        """
        Perform replacements given a number of scene items passed from the app.

        Once a selection has been performed in the main UI and the user clicks
        the update button, this method is called.

        :param item: Dictionary on the same form as was generated by the scan_scene hook above.
                     The path key now holds the path that the node should be updated *to* rather than the current path.
        """

        node_type = item["node_type"]
        path = item["path"]
        extra_data = item["extra_data"]

        if node_type == "reference":
            self.update_reference(path, extra_data)

    def update_reference(self, path, extra_data):
        """"""

        old_path = extra_data["old_path"]
        sg_data = extra_data["sg_data"]

        _, ext = os.path.splitext(path)

        # if the new path is not a path to a wref file, we need to handle the conversion
        if ext != ".wref":

            # get the Alias Translations framework to translate the file to wref before importing it
            framework = self.load_framework("tk-framework-aliastranslations_v0.x.x")
            if not framework:
                self.logger.error(
                    "Couldn't load tk-framework-aliastranslations. Skipping reference update for file {}.".format(
                        path
                    )
                )
                return

            tk_framework_aliastranslations = framework.import_module(
                "tk_framework_aliastranslations"
            )

            tk = self.parent.engine.get_tk_from_project_id(sg_data["project"]["id"])
            source_template = tk.template_from_path(path)
            reference_template = self.parent.engine.get_reference_template(tk, sg_data)

            if source_template and reference_template:

                template_fields = source_template.get_fields(path)
                template_fields["alias.extension"] = ext[1:]
                reference_path = reference_template.apply_fields(template_fields)

                # do the same for the old path in order to get the associated reference path
                template_fields = source_template.get_fields(old_path)
                template_fields["alias.extension"] = ext[1:]
                old_path = reference_template.apply_fields(template_fields)

                if os.path.exists(reference_path):
                    self.logger.debug("File already converted!")
                    path = reference_path

                else:
                    self.logger.debug("Translating file to wref...")
                    translator = tk_framework_aliastranslations.Translator(
                        path, reference_path
                    )
                    translator.execute()
                    path = reference_path

            else:
                self.logger.error(
                    "Couldn't convert file to wref, missing templates. Skipping file {}...".format(
                        path
                    )
                )
                return

        if not old_path or not os.path.exists(old_path):
            self.logger.info(
                "Couldn't find old reference path. Skipping file {}".format(path)
            )
            return

        # get the reference by its uuid if possible, otherwise use its name to find the right instance
        alias_api.update_reference(old_path, path)

    def _get_sg_publish_data(self, alias_refs):
        """"""
        path_list = []
        for r in alias_refs:
            if r.source_path not in path_list:
                path_list.append(r.source_path)
            if r.path not in path_list:
                path_list.append(r.path)

        return sgtk.util.find_publish(
            self.parent.sgtk,
            path_list,
            fields=["project", "task"],
            only_current_project=False,
        )

    def register_scene_change_callback(self, scene_change_callback):
        """
        Register the callback such that it is executed on a scene change event.

        This hook method is useful to reload the breakdown data when the data in the scene has
        changed.

        For Alias, the callback is registered with the AliasEngine event watcher to be
        triggered on a PostRetrieve event (e.g. when a file is opened).

        :param callback: The callback to register and execute on scene chagnes.
        :type callback: function
        """

        # Trigger the scene change callback for these event messages
        events = [
            alias_api.AlMessageType.PostRetrieve,
            alias_api.AlMessageType.ReferenceFileDeleted,
        ]
        # Alias event messages that are only available in version >= 2023.0
        if hasattr(alias_api.AlMessageType, "ReferenceFileAdded"):
            events.append(alias_api.AlMessageType.ReferenceFileAdded)

        # No need to set up the unregister_scene_change_callback method since the
        # AliasEventWatcher will take care of disconnecting the callbacks
        self.parent.engine.event_watcher.register_alias_callback(
            lambda result: scene_change_callback(), events
        )
