# Copyright (c) 2020 Autodesk, Inc.
#
# CONFIDENTIAL AND PROPRIETARY
#
# This work is provided "AS IS" and subject to the Shotgun Pipeline Toolkit
# Source Code License included in this distribution package. See LICENSE.
# By accessing, using, copying or modifying this work you indicate your
# agreement to the Shotgun Pipeline Toolkit Source Code License. All rights
# not expressly granted therein are reserved by Autodesk, Inc.

import copy
import os

import sgtk

HookBaseClass = sgtk.get_hook_baseclass()


class TestBreakdownSceneOperations(HookBaseClass):
    """
    Test the scene operations hook.
    """

    def scan_scene(self):
        """
        Return a hard coded list of references to mock scanning a scene.

        The return data structure is a list of dictionaries. Each scene reference
        that is returned should be represented by a dictionary with three keys:

        - "node_name": The name of the 'node' that is to be operated on. Most DCCs have
          a concept of a node, path or some other way to address a particular
          object in the scene.
        - "node_type": The object type that this is. This is later passed to the
          update method so that it knows how to handle the object.
        - "path": Path on disk to the referenced object.
        - "extra_data": Optional key to pass some extra data to the update method
          in case we'd like to access them when updating the nodes.
        """

        refs = [
            {
                "node_name": "A reference node",
                "node_type": "reference",
                "path": os.path.join("foo", "bar", "hello"),
            },
            {
                "node_name": "A file node",
                "node_type": "file",
                "path": os.path.join("foo", "bar", "world"),
            },
            {
                "node_name": "An updated reference node",
                "node_type": "reference",
                "path": os.path.join("foo", "bar", "again"),
            },
        ]

        result = []
        project_root_paths = os.environ.get("TK_TEST_PROJECT_ROOT_PATHS", "")
        if not project_root_paths:
            project_root_paths = [self.parent.context.filesystem_locations[0]]
        else:
            project_root_paths = project_root_paths.split(",")

        for ref in refs:
            for project_root in project_root_paths:
                result_item = copy.deepcopy(ref)
                result_item["path"] = os.path.join(project_root, ref["path"])
                result.append(result_item)

        return result

    def update(self, item):
        """
        Engine specific hook method to update an item in the scene.

        :param item: Dictionary on the same form as was generated by the scan_scene hook above.
                     The path key now holds the path that the node should be updated *to* rather
                     than the current path.
        """

        # Nothing to do in the mock hook method since this method is engine specific.
